version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: supabase/postgres:17.3.0
    container_name: strategic_plan_db
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - strategic_plan

  # Kong API Gateway
  supabase-kong:
    image: supabase/kong:2.8.1
    container_name: strategic_plan_kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,http-log
      KONG_LOG_LEVEL: info
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
    volumes:
      - ./kong.yml:/kong.yml:ro
    ports:
      - "8000:8000"
    networks:
      - strategic_plan
    depends_on:
      - supabase-auth
      - supabase-rest
      - supabase-realtime
      - supabase-storage

  # Supabase Auth (GoTrue)
  supabase-auth:
    image: supabase/gotrue:v2.158.1
    container_name: strategic_plan_auth
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres?search_path=auth
      GOTRUE_SITE_URL: ${NEXT_PUBLIC_APP_URL}
      GOTRUE_URI_ALLOW_LIST: ${NEXT_PUBLIC_APP_URL}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_JWT_EXP: 3600
      GOTRUE_DISABLE_SIGNUP: false
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
    networks:
      - strategic_plan
    depends_on:
      - postgres

  # PostgREST API
  supabase-rest:
    image: postgrest/postgrest:v12.2.3
    container_name: strategic_plan_rest
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      PGRST_DB_SCHEMAS: public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    networks:
      - strategic_plan
    depends_on:
      - postgres

  # Supabase Realtime
  supabase-realtime:
    image: supabase/realtime:v2.28.32
    container_name: strategic_plan_realtime
    restart: unless-stopped
    environment:
      PORT: 4000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: postgres
      DB_SSL: "false"
      SECRET_KEY_BASE: ${REALTIME_SECRET_KEY_BASE}
      ERL_AFLAGS: -proto_dist inet_tcp
      ENABLE_TAILSCALE: "false"
      DNS_NODES: "''"
    networks:
      - strategic_plan
    depends_on:
      - postgres

  # Supabase Storage
  supabase-storage:
    image: supabase/storage-api:v1.11.1
    container_name: strategic_plan_storage
    restart: unless-stopped
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://supabase-rest:3000
      PGOPTIONS: -c search_path=storage,public
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: strategic-plan
      REGION: us-east-1
      GLOBAL_S3_BUCKET: strategic-plan
      ENABLE_IMAGE_TRANSFORMATION: "false"
    volumes:
      - storage_data:/var/lib/storage
    networks:
      - strategic_plan
    depends_on:
      - postgres
      - supabase-rest

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: strategic_plan_app
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SERVICE_ROLE_KEY}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NODE_ENV=production
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    ports:
      - "3000:3000"
    networks:
      - strategic_plan
    depends_on:
      - supabase-kong
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: strategic_plan_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - strategic_plan
    depends_on:
      - app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  storage_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  strategic_plan:
    driver: bridge